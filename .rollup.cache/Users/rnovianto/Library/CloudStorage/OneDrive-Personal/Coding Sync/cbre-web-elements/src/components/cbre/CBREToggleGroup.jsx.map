{"version":3,"file":"CBREToggleGroup.jsx","sourceRoot":"","sources":["CBREToggleGroup.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,EAAE,EAAE,MAAM,aAAa,CAAC;AACjC,OAAO,EAAE,WAAW,EAAE,eAAe,EAAE,MAAM,8BAA8B,CAAC;AA4B5E;;;;;;;;GAQG;AACH,MAAM,UAAU,eAAe,CAAC,KAA2B;IACzD,OAAO,CACL,CAAC,WAAW,CACV,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CACjB,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CACnB,aAAa,CAAC,CAAC,KAAK,CAAC,aAAoB,CAAC,CAC1C,YAAY,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,CACjC,QAAQ,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CACzB,SAAS,CAAC,CAAC,EAAE,CACX,+CAA+C,EAC/C,KAAK,CAAC,SAAS,CAChB,CAAC,CAEF;MAAA,CAAC,KAAK,CAAC,QAAQ,CACjB;IAAA,EAAE,WAAW,CAAC,CACf,CAAC;AACJ,CAAC;AAWD,MAAM,UAAU,mBAAmB,CAAC,EAQT;QARS,EAClC,KAAK,EACL,QAAQ,EACR,SAAS,EACT,QAAQ,EACR,OAAO,GAAG,SAAS,EACnB,IAAI,GAAG,IAAI,OAEc,EADtB,KAAK,cAP0B,iEAQnC,CADS;IAER,gBAAgB;IAChB,MAAM,WAAW,GAAG;QAClB,EAAE,EAAE,oBAAoB;QACxB,EAAE,EAAE,UAAU;QACd,EAAE,EAAE,WAAW;KAChB,CAAC;IAEF,iBAAiB;IACjB,MAAM,cAAc,GAAG;QACrB,OAAO,EAAE,EAAE,CACT,kFAAkF,EAClF,qEAAqE,EACrE,qEAAqE,CACtE;QACD,OAAO,EAAE,EAAE,CACT,+CAA+C,EAC/C,qEAAqE,EACrE,yDAAyD,EACzD,6DAA6D,CAC9D;KACF,CAAC;IAEF,OAAO,CACL,CAAC,eAAe,CACd,KAAK,CAAC,CAAC,KAAK,CAAC,CACb,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,SAAS,CAAC,CAAC,EAAE,CACX,yDAAyD,EACzD,iDAAiD,EACjD,6DAA6D,EAC7D,kDAAkD,EAClD,WAAW,CAAC,IAAI,CAAC,EACjB,cAAc,CAAC,OAAO,CAAC,EACvB,SAAS,CACV,CAAC,CACF,IAAI,KAAK,CAAC,CAEV;MAAA,CAAC,QAAQ,CACX;IAAA,EAAE,eAAe,CAAC,CACnB,CAAC;AACJ,CAAC","sourcesContent":["\"use client\";\n\nimport React from 'react';\nimport { cn } from \"@/lib/utils\";\nimport { ToggleGroup, ToggleGroupItem } from \"@/components/ui/toggle-group\";\n\ninterface CBREToggleGroupSingleProps {\n  type: \"single\";\n  value?: string;\n  onValueChange?: (value: string) => void;\n  defaultValue?: string;\n  disabled?: boolean;\n  variant?: \"default\" | \"outline\";\n  size?: \"sm\" | \"md\" | \"lg\";\n  className?: string;\n  children?: React.ReactNode;\n}\n\ninterface CBREToggleGroupMultipleProps {\n  type: \"multiple\";\n  value?: string[];\n  onValueChange?: (value: string[]) => void;\n  defaultValue?: string[];\n  disabled?: boolean;\n  variant?: \"default\" | \"outline\";\n  size?: \"sm\" | \"md\" | \"lg\";\n  className?: string;\n  children?: React.ReactNode;\n}\n\ntype CBREToggleGroupProps = CBREToggleGroupSingleProps | CBREToggleGroupMultipleProps;\n\n/**\n * CBREToggleGroup - A styled toggle group component following CBRE design\n * \n * Features:\n * - CBRE green color for active state\n * - Can be used in single or multiple selection mode\n * - Optional outline variant\n * - Three size variants (sm, md, lg)\n */\nexport function CBREToggleGroup(props: CBREToggleGroupProps) {\n  return (\n    <ToggleGroup\n      type={props.type}\n      value={props.value}\n      onValueChange={props.onValueChange as any}\n      defaultValue={props.defaultValue}\n      disabled={props.disabled}\n      className={cn(\n        \"inline-flex items-center justify-center gap-1\",\n        props.className\n      )}\n    >\n      {props.children}\n    </ToggleGroup>\n  );\n}\n\ninterface CBREToggleGroupItemProps {\n  value: string;\n  disabled?: boolean;\n  className?: string;\n  children?: React.ReactNode;\n  variant?: \"default\" | \"outline\";\n  size?: \"sm\" | \"md\" | \"lg\";\n}\n\nexport function CBREToggleGroupItem({\n  value,\n  disabled,\n  className,\n  children,\n  variant = \"default\",\n  size = \"md\",\n  ...props\n}: CBREToggleGroupItemProps) {\n  // Size variants\n  const sizeClasses = {\n    sm: \"h-8 px-2.5 text-xs\",\n    md: \"h-9 px-3\",\n    lg: \"h-10 px-4\"\n  };\n\n  // Variant styles\n  const variantClasses = {\n    default: cn(\n      \"bg-transparent data-[state=on]:bg-[var(--cbre-green)] data-[state=on]:text-white\",\n      \"border border-light-grey data-[state=on]:border-[var(--cbre-green)]\",\n      \"hover:bg-light-grey/20 data-[state=on]:hover:bg-[var(--cbre-green)]\"\n    ),\n    outline: cn(\n      \"bg-transparent data-[state=on]:bg-transparent\",\n      \"border border-light-grey data-[state=on]:border-[var(--cbre-green)]\",\n      \"text-dark-grey data-[state=on]:text-[var(--cbre-green)]\",\n      \"hover:bg-light-grey/20 data-[state=on]:hover:bg-transparent\"\n    )\n  };\n\n  return (\n    <ToggleGroupItem\n      value={value}\n      disabled={disabled}\n      className={cn(\n        \"rounded-none font-calibre font-medium transition-colors\",\n        \"focus-visible:outline-none focus-visible:ring-2\",\n        \"focus-visible:ring-accent-green focus-visible:ring-offset-2\",\n        \"disabled:pointer-events-none disabled:opacity-50\",\n        sizeClasses[size],\n        variantClasses[variant],\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupItem>\n  );\n} "]}