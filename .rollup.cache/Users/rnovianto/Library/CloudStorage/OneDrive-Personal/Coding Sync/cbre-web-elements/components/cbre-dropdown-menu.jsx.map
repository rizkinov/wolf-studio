{"version":3,"file":"cbre-dropdown-menu.jsx","sourceRoot":"","sources":["cbre-dropdown-menu.tsx"],"names":[],"mappings":"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","sourcesContent":["\"use client\";\n\nimport React from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuGroup,\n  DropdownMenuRadioGroup,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n  DropdownMenuPortal,\n} from \"@/components/ui/dropdown-menu\";\nimport { ChevronDown } from \"lucide-react\";\n\n// Define type for menu items with support for various item types\nexport type CBREDropdownMenuItemType = \n  | { type: \"item\"; label: string; onClick?: () => void; disabled?: boolean; variant?: \"default\" | \"destructive\" }\n  | { type: \"checkbox\"; label: string; checked: boolean; onCheckedChange: (checked: boolean) => void; disabled?: boolean }\n  | { type: \"radio\"; label: string; value: string; disabled?: boolean }\n  | { type: \"submenu\"; label: string; items: CBREDropdownMenuItemType[]; disabled?: boolean }\n  | { type: \"label\"; label: string }\n  | { type: \"separator\" };\n\ninterface CBREDropdownMenuProps {\n  trigger: React.ReactNode;\n  items: CBREDropdownMenuItemType[];\n  className?: string;\n  align?: \"start\" | \"center\" | \"end\";\n  side?: \"top\" | \"right\" | \"bottom\" | \"left\";\n  radioValue?: string;\n  onRadioValueChange?: (value: string) => void;\n}\n\n/**\n * CBREDropdownMenu - A styled dropdown menu component following CBRE design\n * \n * Features:\n * - CBRE styling with sharp corners and proper colors\n * - Support for various item types (regular, checkbox, radio, submenu)\n * - Customizable trigger element\n */\nexport function CBREDropdownMenu({\n  trigger,\n  items,\n  className,\n  align = \"start\",\n  side = \"bottom\",\n  radioValue,\n  onRadioValueChange\n}: CBREDropdownMenuProps) {\n  const hasRadioItems = items.some(item => item.type === \"radio\");\n  \n  // Render the menu content based on item types\n  const renderMenuItems = (menuItems: CBREDropdownMenuItemType[], inSubmenu = false) => {\n    let radioItems: CBREDropdownMenuItemType[] = [];\n    let nonRadioItems: CBREDropdownMenuItemType[] = [];\n    \n    // Separate radio items to wrap them in RadioGroup\n    if (!inSubmenu) {\n      menuItems.forEach(item => {\n        if (item.type === \"radio\") {\n          radioItems.push(item);\n        } else {\n          nonRadioItems.push(item);\n        }\n      });\n    } else {\n      nonRadioItems = menuItems;\n    }\n    \n    return (\n      <>\n        {/* Render non-radio items */}\n        {nonRadioItems.map((item, index) => {\n          switch (item.type) {\n            case \"item\":\n              return (\n                <DropdownMenuItem \n                  key={index} \n                  onClick={item.onClick}\n                  disabled={item.disabled}\n                  variant={item.variant}\n                  className=\"text-dark-grey hover:text-cbre-green\"\n                >\n                  {item.label}\n                </DropdownMenuItem>\n              );\n            case \"checkbox\":\n              return (\n                <DropdownMenuCheckboxItem\n                  key={index}\n                  checked={item.checked}\n                  onCheckedChange={item.onCheckedChange}\n                  disabled={item.disabled}\n                  className=\"text-dark-grey hover:text-cbre-green\"\n                >\n                  {item.label}\n                </DropdownMenuCheckboxItem>\n              );\n            case \"submenu\":\n              return (\n                <DropdownMenuSub key={index}>\n                  <DropdownMenuSubTrigger \n                    disabled={item.disabled}\n                    className=\"text-dark-grey hover:text-cbre-green\"\n                  >\n                    {item.label}\n                  </DropdownMenuSubTrigger>\n                  <DropdownMenuPortal>\n                    <DropdownMenuSubContent>\n                      {renderMenuItems(item.items, true)}\n                    </DropdownMenuSubContent>\n                  </DropdownMenuPortal>\n                </DropdownMenuSub>\n              );\n            case \"label\":\n              return (\n                <DropdownMenuLabel key={index} className=\"text-cbre-green font-medium\">\n                  {item.label}\n                </DropdownMenuLabel>\n              );\n            case \"separator\":\n              return <DropdownMenuSeparator key={index} />;\n            default:\n              return null;\n          }\n        })}\n        \n        {/* Render radio items in a RadioGroup */}\n        {radioItems.length > 0 && (\n          <DropdownMenuRadioGroup value={radioValue} onValueChange={onRadioValueChange}>\n            {radioItems.map((item, index) => {\n              if (item.type === \"radio\") {\n                return (\n                  <DropdownMenuRadioItem \n                    key={index} \n                    value={item.value}\n                    disabled={item.disabled}\n                    className=\"text-dark-grey hover:text-cbre-green\"\n                  >\n                    {item.label}\n                  </DropdownMenuRadioItem>\n                );\n              }\n              return null;\n            })}\n          </DropdownMenuRadioGroup>\n        )}\n      </>\n    );\n  };\n\n  // Create a custom trigger if a string is provided\n  const triggerElement = typeof trigger === 'string' ? (\n    <Button variant=\"outline\" className=\"border-light-grey flex gap-1 items-center\">\n      {trigger}\n      <ChevronDown className=\"h-4 w-4 text-dark-grey\" />\n    </Button>\n  ) : trigger;\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        {triggerElement}\n      </DropdownMenuTrigger>\n      <DropdownMenuContent \n        align={align} \n        side={side} \n        className={cn(\"border-light-grey\", className)}\n      >\n        {items.length > 0 ? (\n          renderMenuItems(items)\n        ) : (\n          <DropdownMenuItem disabled>No items</DropdownMenuItem>\n        )}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n} "]}