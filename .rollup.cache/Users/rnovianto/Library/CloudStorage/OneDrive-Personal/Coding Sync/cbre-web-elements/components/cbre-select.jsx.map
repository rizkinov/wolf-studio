{"version":3,"file":"cbre-select.jsx","sourceRoot":"","sources":["cbre-select.tsx"],"names":[],"mappings":"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","sourcesContent":["\"use client\";\n\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectTrigger,\n  SelectValue,\n  SelectSeparator,\n} from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\n\n// Define the props for CBRESelect component\nexport interface CBRESelectProps extends React.ComponentPropsWithoutRef<typeof Select> {\n  label?: string;\n  labelClassName?: string;\n  description?: string;\n  error?: string;\n  triggerClassName?: string;\n  contentClassName?: string;\n  id?: string;\n  className?: string;\n  children: React.ReactNode;\n}\n\n// Define the group options type for the grouped select\nexport interface SelectGroupOption {\n  label: string;\n  value: string;\n  disabled?: boolean;\n}\n\nexport interface SelectGroupItem {\n  label: string;\n  options: SelectGroupOption[];\n}\n\n// Define the props for CBREGroupedSelect component\nexport interface CBREGroupedSelectProps extends Omit<CBRESelectProps, \"children\"> {\n  groups: SelectGroupItem[];\n  placeholder?: string;\n}\n\n/**\n * CBRESelect component that wraps the shadcn/ui Select component with CBRE styling.\n * Provides a label, description, and error handling.\n */\nexport function CBRESelect({\n  label,\n  labelClassName,\n  description,\n  error,\n  triggerClassName,\n  contentClassName,\n  id: propId,\n  className,\n  children,\n  ...props\n}: CBRESelectProps) {\n  // Generate a unique ID for accessibility\n  const id = React.useId();\n  const selectId = propId || `cbre-select-${id}`;\n  const descriptionId = `${selectId}-description`;\n  const errorId = `${selectId}-error`;\n\n  return (\n    <div className={cn(\"space-y-2\", className)}>\n      {label && (\n        <Label\n          htmlFor={selectId}\n          className={cn(\n            \"text-dark-grey font-calibre\",\n            labelClassName\n          )}\n        >\n          {label}\n        </Label>\n      )}\n      {description && !error && (\n        <p id={descriptionId} className=\"text-sm text-muted-foreground font-calibre\">\n          {description}\n        </p>\n      )}\n      \n      <Select\n        {...props}\n        aria-describedby={\n          description || error\n            ? `${description ? descriptionId : \"\"} ${error ? errorId : \"\"}`\n            : undefined\n        }\n      >\n        {/* Use regular React children mapping with type casting for type safety */}\n        {React.Children.map(children, (child) => {\n          if (!React.isValidElement(child)) return child;\n          \n          // Handle SelectTrigger\n          if (child.type === SelectTrigger) {\n            // Type cast the child to React element with SelectTrigger props\n            const trigger = child as React.ReactElement<any>;\n            \n            return React.cloneElement(trigger, {\n              id: selectId,\n              className: cn(\n                \"border-light-grey focus-visible:border-cbre-green focus-visible:ring-accent-light/30\",\n                \"hover:border-cbre-green\",\n                error && \"border-destructive focus-visible:border-destructive focus-visible:ring-destructive/20\",\n                triggerClassName,\n                trigger.props.className\n              ),\n              \"aria-invalid\": error ? \"true\" : undefined,\n            });\n          } \n          \n          // Handle SelectContent\n          if (child.type === SelectContent) {\n            // Type cast the child to React element with SelectContent props  \n            const content = child as React.ReactElement<any>;\n            \n            return React.cloneElement(content, {\n              className: cn(\n                \"border-light-grey\",\n                contentClassName,\n                content.props.className\n              ),\n            });\n          }\n          \n          return child;\n        })}\n      </Select>\n      \n      {error && (\n        <p id={errorId} className=\"text-sm text-destructive font-calibre\">\n          {error}\n        </p>\n      )}\n    </div>\n  );\n}\n\n/**\n * CBREGroupedSelect component that renders a select with grouped options.\n * A convenience wrapper around CBRESelect with pre-built option groups.\n */\nexport function CBREGroupedSelect({\n  groups,\n  placeholder = \"Select an option\",\n  ...props\n}: CBREGroupedSelectProps) {\n  return (\n    <CBRESelect {...props}>\n      <SelectTrigger>\n        <SelectValue placeholder={placeholder} />\n      </SelectTrigger>\n      <SelectContent>\n        {groups.map((group, groupIndex) => (\n          <React.Fragment key={`group-${groupIndex}`}>\n            {groupIndex > 0 && <SelectSeparator />}\n            <SelectGroup>\n              <SelectLabel>{group.label}</SelectLabel>\n              {group.options.map((option) => (\n                <SelectItem \n                  key={option.value} \n                  value={option.value}\n                  disabled={option.disabled}\n                >\n                  {option.label}\n                </SelectItem>\n              ))}\n            </SelectGroup>\n          </React.Fragment>\n        ))}\n      </SelectContent>\n    </CBRESelect>\n  );\n} "]}